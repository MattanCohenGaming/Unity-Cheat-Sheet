{ 
 // Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and  
 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the  
 // same ids are connected. 
 // Example: 
 // "Print to console": { 
 //  "prefix": "log", 
 //  "body": [ 
 //   "console.log('$1');", 
 //   "$2" 
 //  ], 
 //  "description": "Log output to console" 
 // } 
 "Singleton": { 
  "prefix": "awake singleton", 
  "body": [ 
   "private static $1 instance;", 
   "private void Awake(){", 
   " if (instance != null)  Destroy(gameObject);", 
   " else     instance = this;", 
   "}", 
  ], 
  "description": "Add Awake function and instance for singleton classes" 
 }, 
 "Singletontonton": { 
  "prefix": "awake fingleton", 
  "body": [ 
   "private static $1 instance;", 
   "private void Awake(){", 
   " if (instance != null)  Destroy(gameObject);", 
   " else     instance = this;", 
   "}", 
  ], 
  "description": "Add Awake function and instance for singleton classes" 
 }, 
 "IfEditor": { 
  "prefix": "editor #if", 
  "body": [ 
   "#if UNITY_EDITOR", 
   "using UnityEditor;", 
   "", 
   "[CustomEditor(typeof(${1:YourClassName})), CanEditMultipleObjects]", 
   "public class ${1:YourClassName}Editor : Editor", 
   "{", 
   "    public override void OnInspectorGUI()", 
   "    {", 
   "  var myTarget = target as ${1};", 
   "", 
   "       base.OnInspectorGUI();", 
   "", 
   "  GUILayout.Space(20);" 
   "", 
   "        ", 
   "  if (GUILayout.Button(\"${2}\"))", 
   "  {", 
   "   ${3}", 
   "  }", 
   "    }", 
   "}", 
   "#endif" 
   "" 
  ], 
  "description": "Creates a custom editor script for Unity" 
 }, 
 "IfEditorDerived": { 
  "prefix": "editor #if for derieved classes also", 
  "body": [ 
   "#if UNITY_EDITOR", 
   "using UnityEditor;", 
   "", 
   "[CustomEditor(typeof(${1:YourClassName}), editorForChildClasses: true), CanEditMultipleObjects]", 
   "public class ${1:YourClassName}Editor : Editor", 
   "{", 
   "    public override void OnInspectorGUI()", 
   "    {", 
   "  var myTarget = target as ${1};", 
   "  if (GUILayout.Button(\"${2}\"))", 
   "  {", 
   "   ${3}", 
   "  }", 
   "        ", 
   "        GUILayout.Space(20);", 
   "        ", 
   "        base.OnInspectorGUI();", 
   "    }", 
   "}", 
   "#endif" 
   "" 
  ], 
  "description": "Creates a custom editor script for Unity" 
 },
 "SerializedField": {
    "prefix": "Serialized Field",
    "body": [
        "[SerializedField] private $1;",
        "$2"
    ]
 }
   
}